
#include <cv.h>
#include <highgui.h>


void main(int argc, char* argv[])
{
	IplImage *src_image = cvLoadImage("pic.png", CV_LOAD_IMAGE_UNCHANGED);
	IplImage* dst = cvCreateImage(cvGetSize(src_image), 8, 1);
	IplImage* gray = cvCreateImage(cvGetSize(src_image), 8, 1);
	IplImage* color_dst = cvCreateImage(cvGetSize(src_image), 8, 3);
	CvMemStorage* storage = cvCreateMemStorage(0);
	CvMemStorage* storage_circle = cvCreateMemStorage(0);
	CvSeq* lines = 0;
	CvSeq* Circle = 0;
	CvSeq* result = 0;
	CvSeq* contours;
	float* circle;
	int i;
	double s;

	cvNamedWindow("pic1", 0); // 화면을 그려줄 윈도우를 생성한다.
	cvResizeWindow("pic1", 660, 600);

	cvCvtColor(src_image, gray, CV_BGR2GRAY);//그레이 이미지로 변환
	cvCanny(gray, dst, 50, 200, 3);//경계선 이미지로 변환(이진화)
	cvCvtColor(dst, color_dst, CV_GRAY2BGR);

	cvFindContours(gray, storage, &contours, sizeof(CvContour), CV_RETR_TREE)/*, CV_CHAIN_APPROX_SIMPLE, cvPoint(0, 0))*/;



	while(contours)
	{
		result = cvApproxPoly(dst, sizeof(CvSeq), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contours));

		if (result->total == 4 /*&& fabs(cvContourArea(result, CV_WHOLE_SEQ)) > 1000 && cvCheckContourConvexity(result)*/)
		{
			cvDrawContours(src_image, contours, cvScalarAll(255), cvScalarAll(128), 100);
			break;
		}

	}

	/*
	lines = cvHoughLines2(dst, storage, CV_HOUGH_PROBABILISTIC, 1, CV_PI / 180, 50, 50, 5);
	for (i = 0; i < lines->total; i++)
	{     //추출 된 직선의 특징을 여기서 찾아낼 수 있다.
		CvPoint* line = (CvPoint*)cvGetSeqElem(lines, i);

		printf("%d\n", &line[1]);

		cvLine(color_dst, line[0], line[1], CV_RGB(255, 0, 0), 3, 8);
	}
	*/

	/*
	lines = cvHoughLines2(dst, storage, CV_HOUGH_STANDARD, 1, CV_PI / 180, 100, 0, 0);
	for (i = 0; i < MIN(lines->total, 100); i++)
	{    //추출 된 직선의 특징을 여기서 찾아낼 수 있다.
		float* line = (float*)cvGetSeqElem(lines, i);
		float rho = line[0];
		float theta = line[1];
		CvPoint pt1, pt2;
		double a = cos(theta), b = sin(theta);
		double x0 = a*rho, y0 = b*rho;
		pt1.x = cvRound(x0 + 1000 * (-b));
		pt1.y = cvRound(y0 + 1000 * (a));
		pt2.x = cvRound(x0 - 1000 * (-b));
		pt2.y = cvRound(y0 - 1000 * (a));
		
		cvLine(color_dst, pt1, pt2, CV_RGB(255, 0, 0), 3, 8);
		
	}
	*/
	/*cvSmooth(gray, gray, CV_GAUSSIAN, 5, 5);    //스무딩 

	Circle = cvHoughCircles(gray, storage_circle, CV_HOUGH_GRADIENT, 1, 13, 200, 30, 80, 150);    //스무딩하게만든 grayscale영상에서 원을 찾음

	for (int k = 0; k < Circle->total; k++){

		circle = (float*)cvGetSeqElem(Circle, k);

		cvCircle(color_dst, cvPoint(cvRound(circle[0]), cvRound(circle[1])), cvRound(circle[2]), CV_RGB(k * 80, k * 70, k * 90), 3, 8, 0);

	}*/
	//cvShowImage("pic", src_image);
	cvShowImage("pic1", color_dst);
	cvWaitKey(0);

	cvReleaseImage(&src_image);


 
}
